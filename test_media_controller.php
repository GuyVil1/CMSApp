<?php
/**
 * Test complet du MediaController
 */

// D√©marrer la session
session_start();

// Charger la configuration
require_once __DIR__ . '/config/config.php';
require_once __DIR__ . '/core/Auth.php';
require_once __DIR__ . '/app/helpers/security_logger_simple.php';
require_once __DIR__ . '/app/helpers/rate_limit_helper.php';
require_once __DIR__ . '/app/helpers/security_helper.php';

// Initialiser l'authentification
Auth::init();

echo "<h1>üîç TEST COMPLET MediaController</h1>";

// V√©rifier l'authentification
if (!Auth::isLoggedIn()) {
    echo "‚ùå Vous devez √™tre connect√©<br>";
    echo "<a href='/login'>Se connecter</a><br>";
    exit;
}

echo "‚úÖ Utilisateur connect√©: " . Auth::getUser()['login'] . "<br>";

// Si c'est un POST, traiter l'upload
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['file'])) {
    echo "<h2>üì§ SIMULATION MediaController</h2>";
    
    $file = $_FILES['file'];
    echo "‚úÖ Fichier re√ßu: " . $file['name'] . "<br>";
    
    // Simuler le flux du MediaController
    try {
        echo "<h3>1Ô∏è‚É£ Validation de base</h3>";
        
        // V√©rifier que l'extension GD est disponible
        if (!extension_loaded('gd')) {
            throw new \Exception('Extension GD non disponible sur le serveur', 500);
        }
        echo "‚úÖ Extension GD OK<br>";
        
        // V√©rifier que des fichiers ont √©t√© upload√©s
        if (!isset($_FILES['file'])) {
            throw new \Exception('Aucun fichier re√ßu', 400);
        }
        echo "‚úÖ Fichier re√ßu<br>";
        
        echo "<h3>2Ô∏è‚É£ Validation du fichier</h3>";
        
        // V√©rifier les erreurs d'upload
        if ($file['error'] !== UPLOAD_ERR_OK) {
            throw new \Exception('Erreur d\'upload: ' . $file['error'], 400);
        }
        echo "‚úÖ Pas d'erreur d'upload<br>";
        
        // V√©rifier que le fichier temporaire existe
        if (!file_exists($file['tmp_name'])) {
            throw new \Exception('Fichier temporaire introuvable', 400);
        }
        echo "‚úÖ Fichier temporaire existe<br>";
        
        // V√©rifier le type MIME avec validation renforc√©e
        $mimeType = SecurityHelper::getRealMimeType($file['tmp_name']);
        if (!SecurityHelper::validateImageMimeType($mimeType)) {
            throw new \Exception('Type de fichier non autoris√©. Formats accept√©s : JPG, PNG, WebP, GIF', 400);
        }
        echo "‚úÖ Type MIME valide: " . $mimeType . "<br>";
        
        // V√©rifier la taille avec validation renforc√©e
        $maxFileSize = 4194304; // 4MB
        if (!SecurityHelper::validateFileSize($file['size'], $maxFileSize)) {
            throw new \Exception('Fichier trop volumineux (max 4MB)', 400);
        }
        echo "‚úÖ Taille valide: " . number_format($file['size']) . " bytes<br>";
        
        // VALIDATION RENFORC√âE : V√©rifier le contenu r√©el de l'image
        $imageValidation = SecurityHelper::validateImageContent($file['tmp_name']);
        if (!$imageValidation['valid']) {
            throw new \Exception($imageValidation['message'], 400);
        }
        echo "‚úÖ Contenu image valide<br>";
        
        echo "<h3>3Ô∏è‚É£ D√©termination du dossier</h3>";
        
        // R√©cup√©rer les param√®tres
        $gameId = !empty($_POST['game_id']) ? (int)$_POST['game_id'] : null;
        $category = $_POST['category'] ?? 'general';
        
        echo "‚úÖ Game ID: " . ($gameId ?? 'null') . "<br>";
        echo "‚úÖ Category: " . $category . "<br>";
        
        // D√©terminer le dossier d'upload
        $uploadDir = 'public/uploads/';
        if ($gameId) {
            // R√©cup√©rer le nom du jeu
            require_once __DIR__ . '/app/models/Game.php';
            $game = \Game::find($gameId);
            if ($game) {
                $gameName = preg_replace('/[^a-zA-Z0-9_-]/', '', $game['name']);
                $uploadDir .= 'games/' . $gameName . '/';
            } else {
                $uploadDir .= 'games/unknown/';
            }
        } else {
            $uploadDir .= 'article/';
        }
        
        echo "‚úÖ Dossier d'upload: " . $uploadDir . "<br>";
        
        // Cr√©er le dossier si n√©cessaire
        if (!is_dir($uploadDir)) {
            if (!mkdir($uploadDir, 0755, true)) {
                throw new \Exception('Impossible de cr√©er le dossier d\'upload', 500);
            }
        }
        echo "‚úÖ Dossier cr√©√©/v√©rifi√©<br>";
        
        echo "<h3>4Ô∏è‚É£ G√©n√©ration du nom de fichier</h3>";
        
        // G√©n√©rer un nom de fichier unique et s√©curis√©
        $extension = strtolower(pathinfo($file['name'], PATHINFO_EXTENSION));
        $filename = time() . '_' . uniqid() . '.' . $extension;
        $filepath = $uploadDir . $filename;
        
        echo "‚úÖ Nom de fichier g√©n√©r√©: " . $filename . "<br>";
        echo "‚úÖ Chemin complet: " . $filepath . "<br>";
        
        echo "<h3>5Ô∏è‚É£ D√©placement du fichier</h3>";
        
        // D√©placer le fichier
        if (!move_uploaded_file($file['tmp_name'], $filepath)) {
            throw new \Exception('Impossible de d√©placer le fichier upload√©', 500);
        }
        echo "‚úÖ Fichier d√©plac√© avec succ√®s<br>";
        
        echo "<h3>6Ô∏è‚É£ V√©rification finale</h3>";
        
        if (file_exists($filepath)) {
            echo "‚úÖ Fichier existe: " . $filepath . "<br>";
            echo "‚úÖ Taille finale: " . number_format(filesize($filepath)) . " bytes<br>";
            
            // Afficher l'image
            echo "<h3>üñºÔ∏è Image upload√©e:</h3>";
            echo "<img src='/$filepath' style='max-width: 300px; border: 1px solid #ccc;'><br>";
            
            // Nettoyer
            unlink($filepath);
            echo "‚úÖ Fichier de test supprim√©<br>";
            
        } else {
            echo "‚ùå Fichier introuvable apr√®s d√©placement<br>";
        }
        
        echo "<h3>‚úÖ SIMULATION R√âUSSIE !</h3>";
        echo "Toutes les √©tapes du MediaController ont fonctionn√© !<br>";
        
    } catch (Exception $e) {
        echo "<h3>‚ùå ERREUR DANS LA SIMULATION</h3>";
        echo "‚ùå Message: " . $e->getMessage() . "<br>";
        echo "‚ùå Code: " . $e->getCode() . "<br>";
        echo "‚ùå Trace: " . $e->getTraceAsString() . "<br>";
    }
    
    echo "<hr>";
}

// Formulaire de test
echo "<h2>üì§ FORMULAIRE DE TEST</h2>";
$csrfToken = Auth::generateCsrfToken();
echo '<form action="/test_media_controller.php" method="POST" enctype="multipart/form-data">';
echo '<input type="hidden" name="csrf_token" value="' . $csrfToken . '">';
echo '<input type="file" name="file" accept="image/*" required><br><br>';
echo '<input type="submit" value="Tester MediaController">';
echo '</form>';

echo "<hr>";
echo "<p><a href='/test_gd_extension.php'>‚Üê Retour au test GD</a></p>";
?>
