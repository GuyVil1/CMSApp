<?php
/**
 * Test de diagnostic pour l'upload d'images
 */

// D√©marrer la session
session_start();

// Charger la configuration
require_once __DIR__ . '/config/config.php';
require_once __DIR__ . '/core/Auth.php';
require_once __DIR__ . '/app/helpers/security_logger_simple.php';

// Initialiser l'authentification
Auth::init();

echo "<h1>üîç DIAGNOSTIC UPLOAD D'IMAGES</h1>";

// 1. V√©rifier l'authentification
echo "<h2>1Ô∏è‚É£ V√©rification de l'authentification</h2>";
if (Auth::isLoggedIn()) {
    $user = Auth::getUser();
    echo "‚úÖ Utilisateur connect√©: " . ($user['login'] ?? 'N/A') . "<br>";
    echo "‚úÖ ID utilisateur: " . Auth::getUserId() . "<br>";
    echo "‚úÖ R√¥le: " . (Auth::hasRole('admin') ? 'Admin' : 'User') . "<br>";
} else {
    echo "‚ùå Utilisateur non connect√©<br>";
    echo "<a href='/login'>Se connecter</a><br>";
}

// 2. V√©rifier le token CSRF
echo "<h2>2Ô∏è‚É£ V√©rification du token CSRF</h2>";
$csrfToken = Auth::generateCsrfToken();
echo "‚úÖ Token CSRF g√©n√©r√©: " . substr($csrfToken, 0, 20) . "...<br>";

// 3. Test de validation CSRF
if (Auth::verifyCsrfToken($csrfToken)) {
    echo "‚úÖ Validation CSRF fonctionne<br>";
} else {
    echo "‚ùå Validation CSRF √©choue<br>";
}

// 4. V√©rifier les permissions de dossiers
echo "<h2>3Ô∏è‚É£ V√©rification des permissions</h2>";
$uploadDirs = [
    'public/uploads/',
    'public/uploads/article/',
    'public/uploads/games/',
    'app/cache/rate_limit/',
    'app/logs/security/'
];

foreach ($uploadDirs as $dir) {
    if (is_dir($dir)) {
        if (is_writable($dir)) {
            echo "‚úÖ $dir - Existe et accessible en √©criture<br>";
        } else {
            echo "‚ùå $dir - Existe mais non accessible en √©criture<br>";
        }
    } else {
        echo "‚ö†Ô∏è $dir - N'existe pas<br>";
        if (mkdir($dir, 0755, true)) {
            echo "‚úÖ $dir - Cr√©√© avec succ√®s<br>";
        } else {
            echo "‚ùå $dir - Impossible de cr√©er<br>";
        }
    }
}

// 5. Test de log de s√©curit√©
echo "<h2>4Ô∏è‚É£ Test de log de s√©curit√©</h2>";
try {
    SecurityLoggerSimple::logLoginSuccess('test_user', 1);
    echo "‚úÖ Log de s√©curit√© fonctionne<br>";
} catch (Exception $e) {
    echo "‚ùå Erreur de log: " . $e->getMessage() . "<br>";
}

// 6. Formulaire de test d'upload
echo "<h2>5Ô∏è‚É£ Formulaire de test d'upload</h2>";
if (Auth::isLoggedIn()) {
    echo '<form action="/media/upload" method="POST" enctype="multipart/form-data">';
    echo '<input type="hidden" name="csrf_token" value="' . $csrfToken . '">';
    echo '<input type="file" name="file" accept="image/*" required><br><br>';
    echo '<input type="submit" value="Tester l\'upload">';
    echo '</form>';
} else {
    echo "Connectez-vous pour tester l'upload<br>";
}

// 7. V√©rifier les logs d'erreur
echo "<h2>6Ô∏è‚É£ V√©rification des logs d'erreur</h2>";
$errorLog = ini_get('error_log');
if ($errorLog) {
    echo "‚úÖ Log d'erreur configur√©: $errorLog<br>";
    if (file_exists($errorLog)) {
        $size = filesize($errorLog);
        echo "‚úÖ Fichier de log existe (taille: " . number_format($size) . " bytes)<br>";
    } else {
        echo "‚ö†Ô∏è Fichier de log n'existe pas encore<br>";
    }
} else {
    echo "‚ö†Ô∏è Log d'erreur non configur√©<br>";
}

echo "<hr>";
echo "<p><a href='/test_security_web.php'>‚Üê Retour aux tests de s√©curit√©</a></p>";
?>
