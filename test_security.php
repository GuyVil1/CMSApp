<?php
/**
 * Tests de s√©curit√© pour les am√©liorations impl√©ment√©es
 * √Ä ex√©cuter en local pour v√©rifier le bon fonctionnement
 */

// Inclure les helpers n√©cessaires
require_once __DIR__ . '/app/helpers/security_helper.php';
require_once __DIR__ . '/app/helpers/rate_limit_helper.php';
require_once __DIR__ . '/app/helpers/security_logger.php';

echo "üß™ TESTS DE S√âCURIT√â - Belgium Vid√©o Gaming v1.0.0\n";
echo "==================================================\n\n";

// Test 1: Validation d'images renforc√©e
echo "1Ô∏è‚É£ Test de validation d'images renforc√©e\n";
echo "----------------------------------------\n";

// Cr√©er un fichier de test (faux fichier PHP renomm√© en JPG)
$fakeImageContent = '<?php echo "Hello World"; ?>';
$fakeImagePath = __DIR__ . '/test_fake_image.jpg';
file_put_contents($fakeImagePath, $fakeImageContent);

$validation = SecurityHelper::validateImageContent($fakeImagePath);
if (!$validation['valid']) {
    echo "‚úÖ Test r√©ussi: Fichier PHP renomm√© d√©tect√© comme invalide\n";
    echo "   Message: " . $validation['message'] . "\n";
} else {
    echo "‚ùå Test √©chou√©: Fichier PHP renomm√© accept√©\n";
}

// Nettoyer
unlink($fakeImagePath);

// Test 2: Rate limiting
echo "\n2Ô∏è‚É£ Test de rate limiting\n";
echo "------------------------\n";

$userId = 1;
$rateLimitCheck = RateLimitHelper::checkUploadLimits($userId);
echo "Limites d'upload pour utilisateur $userId:\n";
echo "  - Autoris√©: " . ($rateLimitCheck['allowed'] ? 'Oui' : 'Non') . "\n";
if (!$rateLimitCheck['allowed']) {
    echo "  - Raison: " . $rateLimitCheck['reason'] . "\n";
} else {
    echo "  - Uploads par heure: " . $rateLimitCheck['hourly_uploads'] . "/" . $rateLimitCheck['limits']['uploads_per_hour'] . "\n";
    echo "  - Taille par heure: " . $rateLimitCheck['hourly_size'] . "/" . $rateLimitCheck['limits']['size_per_hour'] . "\n";
}

// Test 3: Logs de s√©curit√©
echo "\n3Ô∏è‚É£ Test de logs de s√©curit√©\n";
echo "---------------------------\n";

// Initialiser le logger
SecurityLogger::init();

// Tester diff√©rents types de logs
SecurityLogger::logLoginSuccess('test_user', 1);
SecurityLogger::logLoginFailed('hacker', 'Identifiants incorrects');
SecurityLogger::logUploadSuccess('test_image.jpg', 1024, 1);
SecurityLogger::logCsrfViolation('test_action', 'invalid_token');

echo "‚úÖ Logs de s√©curit√© test√©s:\n";
echo "  - Connexion r√©ussie\n";
echo "  - Connexion √©chou√©e\n";
echo "  - Upload r√©ussi\n";
echo "  - Violation CSRF\n";

// V√©rifier que les logs ont √©t√© cr√©√©s
$logFile = __DIR__ . '/app/logs/security/security_' . date('Y-m-d') . '.log';
if (file_exists($logFile)) {
    $logContent = file_get_contents($logFile);
    $logLines = explode("\n", trim($logContent));
    echo "  - Fichier de log cr√©√©: " . basename($logFile) . "\n";
    echo "  - Nombre d'entr√©es: " . count(array_filter($logLines)) . "\n";
} else {
    echo "‚ùå Fichier de log non cr√©√©\n";
}

// Test 4: Statistiques de s√©curit√©
echo "\n4Ô∏è‚É£ Test des statistiques de s√©curit√©\n";
echo "------------------------------------\n";

$stats = SecurityLogger::getStats();
echo "Statistiques du jour:\n";
echo "  - Total d'√©v√©nements: " . $stats['total_events'] . "\n";
echo "  - Par niveau: " . json_encode($stats['by_level']) . "\n";
echo "  - Par √©v√©nement: " . json_encode($stats['by_event']) . "\n";
echo "  - IPs uniques: " . count($stats['unique_ips']) . "\n";

// Test 5: Validation de s√©curit√©
echo "\n5Ô∏è‚É£ Test de validation de s√©curit√©\n";
echo "----------------------------------\n";

// Test validation email
$validEmail = SecurityHelper::validateEmail('test@example.com');
$invalidEmail = SecurityHelper::validateEmail('invalid-email');
echo "Validation email:\n";
echo "  - test@example.com: " . ($validEmail ? 'Valide' : 'Invalide') . "\n";
echo "  - invalid-email: " . ($invalidEmail ? 'Valide' : 'Invalide') . "\n";

// Test validation URL
$validUrl = SecurityHelper::validateUrl('https://example.com');
$invalidUrl = SecurityHelper::validateUrl('not-a-url');
echo "Validation URL:\n";
echo "  - https://example.com: " . ($validUrl ? 'Valide' : 'Invalide') . "\n";
echo "  - not-a-url: " . ($invalidUrl ? 'Valide' : 'Invalide') . "\n";

// Test validation nom de fichier
$validFilename = SecurityHelper::validateFilename('image.jpg');
$invalidFilename = SecurityHelper::validateFilename('../../../etc/passwd');
echo "Validation nom de fichier:\n";
echo "  - image.jpg: " . ($validFilename ? 'Valide' : 'Invalide') . "\n";
echo "  - ../../../etc/passwd: " . ($invalidFilename ? 'Valide' : 'Invalide') . "\n";

// Test 6: G√©n√©ration de noms s√©curis√©s
echo "\n6Ô∏è‚É£ Test de g√©n√©ration s√©curis√©e\n";
echo "-------------------------------\n";

$secureFilename = SecurityHelper::generateSecureFilename('mon_image.jpg');
$secureSlug = SecurityHelper::generateSlug('Mon Super Article !');
echo "G√©n√©ration s√©curis√©e:\n";
echo "  - Nom de fichier: " . $secureFilename . "\n";
echo "  - Slug: " . $secureSlug . "\n";

// Test 7: D√©tection de contenu malveillant
echo "\n7Ô∏è‚É£ Test de d√©tection de contenu malveillant\n";
echo "------------------------------------------\n";

$maliciousContent = '<script>alert("XSS")</script>';
$safeContent = '<p>Contenu normal</p>';
$isMalicious = SecurityHelper::containsMaliciousContent($maliciousContent);
$isSafe = SecurityHelper::containsMaliciousContent($safeContent);
echo "D√©tection de contenu malveillant:\n";
echo "  - Contenu avec script: " . ($isMalicious ? 'D√©tect√©' : 'Non d√©tect√©') . "\n";
echo "  - Contenu normal: " . ($isSafe ? 'D√©tect√©' : 'Non d√©tect√©') . "\n";

echo "\nüéâ TESTS TERMIN√âS\n";
echo "==================\n";
echo "Tous les tests de s√©curit√© ont √©t√© ex√©cut√©s.\n";
echo "V√©rifiez les r√©sultats ci-dessus pour vous assurer que tout fonctionne correctement.\n";
echo "\nüìã R√âSUM√â DES AM√âLIORATIONS:\n";
echo "‚úÖ Protection CSRF sur tous les formulaires\n";
echo "‚úÖ Validation renforc√©e du contenu des images\n";
echo "‚úÖ Rate limiting pour uploads et connexions\n";
echo "‚úÖ Syst√®me de logs de s√©curit√© complet\n";
echo "‚úÖ Helpers de s√©curit√© centralis√©s\n";
echo "\nüõ°Ô∏è Votre application est maintenant s√©curis√©e au niveau FERRARI !\n";
?>
